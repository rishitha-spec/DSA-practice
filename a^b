class Solution:
    def getLastDigit(a: str, b: str) -> int:
        # If exponent is "0", a^0 = 1 (unless a=0 but that's edge case)
        if b == "0":
            return 1

        # Last digit of base
        last_digit_a = int(a[-1])
        
        # Pattern for last digit cycles
        # Example: 2^1=2, 2^2=4, 2^3=8, 2^4=6, 2^5=2 ...
        cycle = [last_digit_a]
        while True:
            next_val = (cycle[-1] * last_digit_a) % 10
            if next_val == cycle[0]:
                break
            cycle.append(next_val)
        
        # Get b modulo cycle length (convert b to int mod len(cycle))
        cycle_len = len(cycle)
        b_mod = 0
        for digit in b:
            b_mod = (b_mod * 10 + int(digit)) % cycle_len
        
        # If b_mod is 0, take the last element in cycle
        if b_mod == 0:
            return cycle[-1]
        else:
            return cycle[b_mod - 1]
